module ContractType = {
  @genType
  type t = 
  {{#each codegen_contracts as | contract |}}
    | @as("{{contract.name.capitalized}}") {{contract.name.capitalized}}
  {{/each}}

  let name = "CONTRACT_TYPE"
  let variants = [
  {{#each codegen_contracts as | contract |}}
    {{contract.name.capitalized}},
  {{/each}}
  ]
  let config = Internal.makeEnumConfig(~name, ~variants)
}

module EntityType = {
  @genType
  type t = 
  {{#each entities as | entity |}}
    | @as("{{entity.name.original}}") {{entity.name.capitalized}}
  {{/each}}
    | @as("dynamic_contract_registry") DynamicContractRegistry

  let name = "ENTITY_TYPE"
  let variants = [
  {{#each entities as | entity |}}
    {{entity.name.capitalized}},
  {{/each}}
    DynamicContractRegistry,
  ]
  let config = Internal.makeEnumConfig(~name, ~variants)
}
{{#each gql_enums as | enum |}} 

module {{enum.name.capitalized}} = {
  @genType
  type t = 
  {{#each enum.params as | param | }}
    | @as("{{param.original}}") {{param.capitalized}}
  {{/each}}

  let name = "{{enum.name.capitalized}}"
  let variants = [
  {{#each enum.params as | param | }}
    {{param.capitalized}},
  {{/each}}
  ]
  let config = Internal.makeEnumConfig(~name, ~variants)
}
{{/each}}

let allEnums = ([
  ContractType.config->Internal.fromGenericEnumConfig,
  EntityType.config->Internal.fromGenericEnumConfig,
{{#each gql_enums as | enum |}} 
  {{enum.name.capitalized}}.config->Internal.fromGenericEnumConfig,
{{/each}}
])
