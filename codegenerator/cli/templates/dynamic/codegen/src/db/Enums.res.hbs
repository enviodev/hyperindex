// Graphql Enum Type Variants
type enumType<'a> = {
  name: string,
  variants: array<'a>,
  schema: S.t<'a>,
  default: 'a,
}

let mkEnum = (~name, ~variants) => {
  name,
  variants,
  schema: S.enum(variants),
  default: switch variants->Belt.Array.get(0) {
  | Some(v) => v
  | None => Js.Exn.raiseError("No variants defined for enum " ++ name)
  },
}

module type Enum = {
  type t
  let enum: enumType<t>
}

module EntityHistoryRowAction = {
  type t = Set | Delete
  let variants = [Set, Delete]
  let name = "ENTITY_HISTORY_ROW_ACTION"
  let enum = mkEnum(~name, ~variants)
}

module ContractType = {
  @genType
  type t = 
  {{#each codegen_contracts as | contract |}}
    | @as("{{contract.name.capitalized}}") {{contract.name.capitalized}}
  {{/each}}

  let name = "CONTRACT_TYPE"
  let variants = [
  {{#each codegen_contracts as | contract |}}
    {{contract.name.capitalized}},
  {{/each}}
  ]
  let enum = mkEnum(~name, ~variants)
}

module EntityType = {
  @genType
  type t = 
  {{#each entities as | entity |}}
    | @as("{{entity.name.capitalized}}") {{entity.name.capitalized}}
  {{/each}}

  let name = "ENTITY_TYPE"
  let variants = [
  {{#each entities as | entity |}}
    {{entity.name.capitalized}},
  {{/each}}
  ]

  let enum = mkEnum(~name, ~variants)
}

{{#each gql_enums as | enum |}} 
module {{enum.name.capitalized}} = {
  @genType
  type t = 
  {{#each enum.params as | param | }}
    | @as("{{param.original}}") {{param.capitalized}}
  {{/each}}

  let name = "{{enum.name.capitalized}}"
  let variants = [
  {{#each enum.params as | param | }}
    {{param.capitalized}},
  {{/each}}
  ]
  let enum = mkEnum(~name, ~variants)
  }

{{/each}}
let allEnums: array<module(Enum)> = [
  module(EntityHistoryRowAction),
  module(ContractType), 
  module(EntityType),
{{#each gql_enums as | enum |}} 
  module({{enum.name.capitalized}}),
{{/each}}
]
