// Graphql Enum Type Variants
type enumType<'a> = {
  name: string,
  variants: array<'a>,
}

let mkEnum = (~name, ~variants) => {
  name,
  variants,
}

module type Enum = {
  type t
  let enum: enumType<t>
}

module ContractType = {
  @genType
  type t = 
  {{#each codegen_contracts as | contract |}}
    | @as("{{contract.name.capitalized}}") {{contract.name.capitalized}}
  {{/each}}

  let schema = 
    {{#if codegen_contracts.1}}
    S.union([
    {{#each codegen_contracts as | contract |}}
      S.literal({{contract.name.capitalized}}), 
    {{/each}}
    ])
    {{else}}
    {{#each codegen_contracts as | contract |}}
      S.literal({{contract.name.capitalized}})
    {{/each}}
    {{/if}}

  let name = "CONTRACT_TYPE"
  let variants = [
  {{#each codegen_contracts as | contract |}}
    {{contract.name.capitalized}},
  {{/each}}
  ]
  let enum = mkEnum(~name, ~variants)
}

module EntityType = {
  @genType
  type t = 
  {{#each entities as | entity |}}
    | @as("{{entity.name.capitalized}}") {{entity.name.capitalized}}
  {{/each}}

  let schema = S.union([
  {{#each entities as | entity |}}
    S.literal({{entity.name.capitalized}}), 
  {{/each}}
  ])

  let name = "ENTITY_TYPE"
  let variants = [
  {{#each entities as | entity |}}
    {{entity.name.capitalized}},
  {{/each}}
  ]

  let enum = mkEnum(~name, ~variants)
}

{{#each gql_enums as | enum |}} 
module {{enum.name.capitalized}} = {
  @genType
  type t = 
  {{#each enum.params as | param | }}
    | @as("{{param.original}}") {{param.capitalized}}
  {{/each}}


  let default = {{enum.params.[0].capitalized}}
  let schema: S.t<t> = S.union([
    {{#each enum.params as | param | }}
    S.literal({{param.capitalized}}), 
    {{/each}}
  ])

  let name = "{{enum.name.capitalized}}"
  let variants = [
  {{#each enum.params as | param | }}
    {{param.capitalized}},
  {{/each}}
  ]
  let enum = mkEnum(~name, ~variants)
  }
{{/each}}

let allEnums: array<module(Enum)> = [
  module(ContractType), 
  module(EntityType),
{{#each gql_enums as | enum |}} 
  module({{enum.name.capitalized}}),
{{/each}}
]
