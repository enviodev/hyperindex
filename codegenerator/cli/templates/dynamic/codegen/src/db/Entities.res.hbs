open Table
open Enums.EntityType
type id = string

type internalEntity
module type Entity = {
  type t
  let key: string
  let name: Enums.EntityType.t
  let schema: S.schema<t>
  let rowsSchema: S.schema<array<t>>
  let table: Table.table
}
module type InternalEntity = Entity with type t = internalEntity
external entityModToInternal: module(Entity with type t = 'a) => module(InternalEntity) = "%identity"

//shorthand for punning
let isPrimaryKey = true
let isNullable = true
let isArray = true
let isIndex = true

@genType
type whereOperations<'entity, 'fieldType> = {eq: 'fieldType => promise<array<'entity>>}

{{#each entities as |entity|}}
module {{entity.name.capitalized}} = {
  let key = "{{entity.name.original}}"
  let name = {{entity.name.capitalized}}
  @genType
  type t = {
    {{#each entity.params as | param |}}
    {{#unless param.is_derived_from }}{{param.field_name.uncapitalized}}{{#if param.is_entity_field}}_id{{/if}}: {{param.res_type}},{{/unless}}
    {{/each}}
  }

  let schema = S.object((s): t => {
    {{#each entity.params as | param |}}
    {{#unless param.is_derived_from }}{{param.field_name.uncapitalized}}{{#if param.is_entity_field}}_id{{/if}}: s.field("{{param.field_name.uncapitalized}}{{#if param.is_entity_field}}_id{{/if}}", {{param.res_schema_code}}),{{/unless}}
    {{/each}}
  })

  let rowsSchema = S.array(schema)

  @genType
  type indexedFieldOperations = {
    {{#each entity.params as | param |}}{{#if param.is_queryable_field}}
      @as("{{param.field_name.original}}{{#if param.is_entity_field }}_id{{/if}}") {{param.field_name.uncapitalized}}{{#if param.is_entity_field }}_id{{/if}}: whereOperations<t, {{param.res_type}}>,
    {{/if}}{{/each}}
  }

  let table = mkTable(
     (name :> string),
    ~fields=[
  {{#each entity.postgres_fields as | pg_field |}}
      mkField(
      "{{pg_field.field_name}}", 
      {{pg_field.field_type}},
      {{!--Cleaner readability if the flags are not applied when not needed but it could be inlined--}}
      {{#if pg_field.is_primary_key}}~isPrimaryKey,{{/if}}
      {{#if pg_field.is_nullable}}~isNullable,{{/if}}
      {{#if pg_field.is_array}}~isArray,{{/if}}
      {{#if pg_field.is_index}}~isIndex,{{/if}}
      {{#if pg_field.linked_entity}}~linkedEntity="{{pg_field.linked_entity}}",{{/if}}
      ),
  {{/each}}
      mkField("db_write_timestamp", TimestampWithoutTimezone, ~default="CURRENT_TIMESTAMP"),
  {{#each entity.derived_fields as | derived_field |}}
      mkDerivedFromField(
      "{{derived_field.field_name}}", 
      ~derivedFromEntity="{{derived_from_entity}}",
      ~derivedFromField="{{derived_from_field}}",
      ),
  {{/each}}
    ],
  {{!--Only add these if there are any--}}
  {{#if entity.composite_indices.0}}
    ~compositeIndices=[
  {{#each entity.composite_indices as | composite_index |}}
      [
    {{#each composite_index as | index |}}
      "{{index}}",
    {{/each}}
      ],
  {{/each}}
    ],
  {{/if}}
  )

  let entityHistory = table->EntityHistory.fromTable(~schema)
}
 
{{/each}}

type entity = 
{{#each entities as | entity |}}
  | {{entity.name.capitalized}}({{entity.name.capitalized}}.t)
{{/each}}

let makeGetter = (schema, accessor) => json => json->S.parseWith(schema)->Belt.Result.map(accessor)

let getEntityParamsDecoder = (entityName: Enums.EntityType.t) =>
  switch entityName {
{{#each entities as | entity |}}
  | {{entity.name.capitalized}} => makeGetter({{entity.name.capitalized}}.schema, e => {{entity.name.capitalized}}(e))
{{/each}}
  }

let allTables: array<table> = [
{{#each entities as |entity|}}
  {{entity.name.capitalized}}.table,
{{/each}}
]

let allEntityHistory: array<EntityHistory.t<EntityHistory.entityInternal>> = [
{{#each entities as |entity|}}
  {{entity.name.capitalized}}.entityHistory->EntityHistory.castInternal,
{{/each}}
]

let schema = Schema.make(allTables)

@get
external getEntityId: internalEntity => string = "id"

exception UnexpectedIdNotDefinedOnEntity
let getEntityIdUnsafe = (entity: 'entity): id =>
  switch Utils.magic(entity)["id"] {
  | Some(id) => id
  | None =>
    UnexpectedIdNotDefinedOnEntity->ErrorHandling.mkLogAndRaise(
      ~msg="Property 'id' does not exist on expected entity object",
    )
  }
