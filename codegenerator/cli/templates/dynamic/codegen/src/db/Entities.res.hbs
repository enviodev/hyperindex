open Table
type id = string

//shorthand for punning
let isPrimaryKey = true
let isNullable = true
let isIndex = true

module type Entity = {
  type t
  let schema: S.schema<t>
  let rowsSchema: S.schema<array<t>>
  let table: Table.table
}

let batchRead = (type entity, ~entityMod: module(Entity with type t = entity)) => {
  let module(EntityMod) = entityMod
  let {table, rowsSchema} = module(EntityMod)
  DbFunctionsEntities.makeReadEntities(~table, ~rowsSchema)
}

let batchSet = (type entity, ~entityMod: module(Entity with type t = entity)) => {
  let module(EntityMod) = entityMod
  let {table, rowsSchema} = module(EntityMod)
  DbFunctionsEntities.makeBatchSet(~table, ~rowsSchema)
}

let batchDelete = (type entity, ~entityMod: module(Entity with type t = entity)) => {
  let module(EntityMod) = entityMod
  let {table} = module(EntityMod)
  DbFunctionsEntities.makeBatchDelete(~table)
}

{{#each entities as |entity|}}
module {{entity.name.capitalized}} = {
  @genType
  type t = {
    {{#each entity.params as | param |}}
    {{#unless param.is_derived_from }}{{param.field_name.uncapitalized}}{{#if param.is_entity_field}}_id{{/if}}: {{param.type_rescript}},{{/unless}}
    {{/each}}
  }

  let schema = S.object((. s) => {
    {{#each entity.params as | param |}}
    {{#unless param.is_derived_from }}{{param.field_name.uncapitalized}}{{#if param.is_entity_field}}_id{{/if}}: s.field("{{param.field_name.uncapitalized}}{{#if param.is_entity_field}}_id{{/if}}", {{param.type_rescript_schema}}),{{/unless}}
    {{/each}}
  })

  let rowsSchema = S.array(schema)

  let table = mkTable(
    "{{entity.name.original}}",
    ~fields=[
  {{#each entity.postgres_fields as | pg_field |}}
      mkField(
      "{{pg_field.field_name}}", 
      {{pg_field.field_type}},
      {{!--Cleaner readability if the flags are not applied when not needed but it could be inlined--}}
      {{#if pg_field.is_primary_key}}~isPrimaryKey,{{/if}}
      {{#if pg_field.is_nullable}}~isNullable,{{/if}}
      {{#if pg_field.is_index}}~isIndex,{{/if}}
      {{#if pg_field.linked_entity}}~linkedEntity="{{pg_field.linked_entity}}",{{/if}}
      ),
  {{/each}}
  {{#each entity.derived_fields as | derived_field |}}
      mkDerivedFromField(
      "{{derived_field.field_name}}", 
      ~derivedFromEntity="{{derived_from_entity}}",
      ~derivedFromField="{{derived_from_field}}",
      ),
  {{/each}}
    ],
  {{!--Only add these if there are any--}}
  {{#if entity.composite_indices.0}}
    ~compositeIndices=[
  {{#each entity.composite_indices as | composite_index |}}
      [
    {{#each composite_index as | index |}}
      "{{index}}",
    {{/each}}
      ],
  {{/each}}
    ],
  {{/if}}
  )
}
 
{{/each}}

type entity = 
{{#each entities as | entity |}}
  | {{entity.name.capitalized}}Entity({{entity.name.capitalized}}.t)
{{/each}}

type entityName =
{{#each entities as | entity |}}
  | @as("{{entity.name.capitalized}}") {{entity.name.capitalized}}
{{/each}}

let entityNameSchema = 
{{#if entities.1}}
{{!-- If there are multiple entities --}}
S.union([
{{#each entities as | entity |}}
  S.literal({{entity.name.capitalized}}), 
{{/each}}
])
{{else}}
{{#each entities as | entity |}}
  S.literal({{entity.name.capitalized}})
{{/each}}
{{/if}}

let getEntityParamsDecoder = entityName =>
  switch entityName {
{{#each entities as | entity |}}
  | {{entity.name.capitalized}} => json => json->S.parseWith(. {{entity.name.capitalized}}.schema)->Belt.Result.map(decoded => {{entity.name.capitalized}}Entity(decoded))
{{/each}}
  }

let allTables: array<table> = [
{{#each entities as |entity|}}
  {{entity.name.capitalized}}.table,
{{/each}}
]
let schema = Schema.make(allTables)
