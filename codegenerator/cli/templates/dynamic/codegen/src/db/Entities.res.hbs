open Table
open Types

//shorthand for punning
let isPrimaryKey = true
let isNullable = true
let isIndex = true

{{#each entities as |entity|}}
module {{entity.name.capitalized}} = {
  @genType
  type row = {
    {{#each entity.params as | param |}}
    {{#unless param.is_derived_from }}{{param.field_name.uncapitalized}}{{#if param.is_entity_field}}_id{{/if}}: {{param.type_rescript}},{{/unless}}
    {{/each}}
  }

  let schema = S.object((. s) => {
    {{#each entity.params as | param |}}
    {{#unless param.is_derived_from }}{{param.field_name.uncapitalized}}{{#if param.is_entity_field}}_id{{/if}}: s.field("{{param.field_name.uncapitalized}}{{#if param.is_entity_field}}_id{{/if}}", {{param.type_rescript_schema}}),{{/unless}}
    {{/each}}
  })

  let rowsSchema = S.array({{entity.name.uncapitalized}}EntitySchema)

  let table = mkTable(
    "{{entity.name.original}}",
    ~fields=[
  {{#each entity.postgres_fields as | pg_field |}}
      mkField(
      "{{pg_field.field_name}}", 
      {{pg_field.field_type}},
      {{!--Cleaner readability if the flags are not applied when not needed but it could be inlined--}}
      {{#if pg_field.is_primary_key}}~isPrimaryKey,{{/if}}
      {{#if pg_field.is_nullable}}~isNullable,{{/if}}
      {{#if pg_field.is_index}}~isIndex,{{/if}}
      {{#if pg_field.linked_entity}}~linkedEntity="{{pg_field.linked_entity}}",{{/if}}
      ),
  {{/each}}
  {{#each entity.derived_fields as | derived_field |}}
      mkDerivedFromField(
      "{{derived_field.field_name}}", 
      ~derivedFromEntity="{{derived_from_entity}}",
      ~derivedFromField="{{derived_from_field}}",
      ),
  {{/each}}
    ],
  {{!--Only add these if there are any--}}
  {{#if entity.composite_indices.0}}
    ~compositeIndices=[
  {{#each entity.composite_indices as | composite_index |}}
      [
    {{#each composite_index as | index |}}
      "{{index}}",
    {{/each}}
      ],
  {{/each}}
    ],
  {{/if}}
  )
}
 
{{/each}}


let allTables: array<table> = [
{{#each entities as |entity|}}
  {{entity.name.capitalized}}.table,
{{/each}}
]
let schema = Schema.make(allTables)
