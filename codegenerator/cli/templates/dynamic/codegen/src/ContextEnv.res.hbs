open Types

let makeDynamicContractRegisterFn = (
  ~contractName: Enums.ContractType.t,
  ~onRegister,
) => (contractAddress: Address.t) => {
  {{#if is_evm_ecosystem}} {{!-- TODO: Add validation for Fuel --}}
  // Even though it's the Address.t type on ReScript side, for TS side it's a string.
  // So we need to ensure that it's a valid checksummed address.
  let contractAddress = contractAddress->Address.Evm.fromAddressOrThrow
  {{/if}}

  onRegister(~contractAddress, ~contractName)
}

let getContractRegisterContext = (~onRegister) => {
  // TODO: only add contracts we've registered for the event in the config
  {{#each codegen_contracts as |contract| }}
  add{{contract.name.capitalized}}:  makeDynamicContractRegisterFn(~contractName={{contract.name.capitalized}}, ~onRegister),
  {{/each}}
}->(Utils.magic: Types.contractRegistrations => Internal.contractRegisterContext)

let getContractRegisterArgs = (eventItem: Internal.eventItem, ~onRegister): Internal.contractRegisterArgs => {
  event: eventItem.event,
  context: getContractRegisterContext(~onRegister),
}
