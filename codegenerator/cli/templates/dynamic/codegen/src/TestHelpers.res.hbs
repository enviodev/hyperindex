/***** TAKE NOTE ******
This is a hack to get genType to work!

In order for genType to produce recursive types, it needs to be at the 
root module of a file. If it's defined in a nested module it does not 
work. So all the MockDb types and internal functions are defined in TestHelpers_MockDb
and only public functions are recreated and exported from this module.

the following module:
```rescript
module MyModule = {
  @genType
  type rec a = {fieldB: b}
  @genType and b = {fieldA: a}
}
```

produces the following in ts:
```ts
// tslint:disable-next-line:interface-over-type-literal
export type MyModule_a = { readonly fieldB: b };

// tslint:disable-next-line:interface-over-type-literal
export type MyModule_b = { readonly fieldA: MyModule_a };
```

fieldB references type b which doesn't exist because it's defined
as MyModule_b
*/

module MockDb = {
  @genType
  let createMockDb = TestHelpers_MockDb.createMockDb
}

@genType
module Addresses = {
  include TestHelpers_MockAddresses
}

module EventFunctions = {
  //Note these are made into a record to make operate in the same way
  //for Res, JS and TS.

  /**
  The arguements that get passed to a "processEvent" helper function
  */
  @genType
  type eventProcessorArgs<'event> = {
    event: 'event,
    mockDb: TestHelpers_MockDb.t,
    @deprecated("Set the chainId for the event instead")
    chainId?: int,
  }

  @genType
  type eventProcessor<'event> = eventProcessorArgs<'event> => promise<TestHelpers_MockDb.t>

  /**
  A function composer to help create individual processEvent functions
  */
  let makeEventProcessor = (~register) => args => {
    let {event, mockDb, ?chainId} =
      args->(Utils.magic: eventProcessorArgs<'event> => eventProcessorArgs<Internal.event>)

    // Have the line here, just in case the function is called with
    // a manually created event. We don't want to break the existing tests here.
    let _ =
      TestHelpers_MockDb.mockEventRegisters->Utils.WeakMap.set(event, register)
    TestHelpers_MockDb.makeProcessEvents(mockDb, ~chainId=?chainId)([event->(Utils.magic: Internal.event => Types.eventLog<unknown>)])
  }

  module MockBlock = {
    @genType
    type t = {
      {{#each aggregated_field_selection.block_fields as | field |}}
      {{field.name.camel}}?: {{field.res_type}},
      {{/each}}
    }

    let toBlock = (_mock: t) => {
      {{#each aggregated_field_selection.block_fields as | field |}}
      {{field.name.camel}}: _mock.{{field.name.camel}}->Belt.Option.getWithDefault({{field.default_value_rescript}}),
      {{/each}}
    }->(Utils.magic: Types.AggregatedBlock.t => Internal.eventBlock)
  }

  module MockTransaction = {
    @genType
    type t = {
      {{#each aggregated_field_selection.transaction_fields as | field |}}
      {{field.name.camel}}?: {{field.res_type}},
      {{/each}}
    }

    let toTransaction = (_mock: t) => {
      {{#each aggregated_field_selection.transaction_fields as | field |}}
      {{field.name.camel}}: _mock.{{field.name.camel}}->Belt.Option.getWithDefault({{field.default_value_rescript}}),
      {{/each}}
    }->(Utils.magic: Types.AggregatedTransaction.t => Internal.eventTransaction)
  }

  @genType
  type mockEventData = {
    chainId?: int,
    srcAddress?: Address.t,
    logIndex?: int,
    block?: MockBlock.t,
    transaction?: MockTransaction.t,
  }

  /**
  Applies optional paramters with defaults for all common eventLog field
  */
  let makeEventMocker = (
    ~params: Internal.eventParams,
    ~mockEventData: option<mockEventData>,
    ~register: unit => Internal.eventConfig,
  ): Internal.event => {
    let {?block, ?transaction, ?srcAddress, ?chainId, ?logIndex} =
      mockEventData->Belt.Option.getWithDefault({})
    let block = block->Belt.Option.getWithDefault({})->MockBlock.toBlock
    let transaction = transaction->Belt.Option.getWithDefault({})->MockTransaction.toTransaction
    let event: Internal.event = {
      params,
      transaction,
      chainId: switch chainId {
      | Some(chainId) => chainId
      | None =>
        switch Generated.configWithoutRegistrations.defaultChain {
        | Some(chainConfig) => chainConfig.id
        | None =>
          Js.Exn.raiseError(
            "No default chain Id found, please add at least 1 chain to your config.yaml",
          )
        }
      },
      block,
      srcAddress: srcAddress->Belt.Option.getWithDefault(Addresses.defaultAddress),
      logIndex: logIndex->Belt.Option.getWithDefault(0),
    }
    // Since currently it's not possible to figure out the event config from the event
    // we store a reference to the register function by event in a weak map
    let _ = TestHelpers_MockDb.mockEventRegisters->Utils.WeakMap.set(event, register)
    event
  }
}

{{#each codegen_contracts as | contract |}}

module {{contract.name.capitalized}} = {
  {{#each contract.codegen_events as | event |}}
  module {{event.name}} = {
    @genType
    let processEvent: EventFunctions.eventProcessor<Types.{{contract.name.capitalized}}.{{event.name}}.event> = EventFunctions.makeEventProcessor(
      ~register=(Types.{{contract.name.capitalized}}.{{event.name}}.register :> unit => Internal.eventConfig),
    )

    {{#if ../../is_evm_ecosystem}}
    @genType
    type createMockArgs = {
      {{#each event.params as | param |}}
      {{!--
      TODO: handle potential namespace clash where "mockEventData" is
      also the named key of an event argument
      --}}
      @as("{{param.js_name}}")
      {{param.res_name}}?: {{param.res_type}},
      {{/each}}
      mockEventData?: EventFunctions.mockEventData,
    }

    @genType
    let createMockEvent = args => {
      let {
        {{#each event.params as | param |}}
        ?{{param.res_name}},
        {{/each}}
        ?mockEventData,
      } = args

      let params = 
      {{#if event.params}}
      {
      {{#each event.params as | param |}}
       {{param.res_name}}: {{param.res_name}}->Belt.Option.getWithDefault({{param.default_value_rescript}}),
      {{/each}}
      }
      {{else}}
      ()
      {{/if}}->(Utils.magic: Types.{{contract.name.capitalized}}.{{event.name}}.eventArgs => Internal.eventParams)

      EventFunctions.makeEventMocker(
        ~params,
        ~mockEventData,
        ~register=(Types.{{contract.name.capitalized}}.{{event.name}}.register :> unit => Internal.eventConfig),
      )->(Utils.magic: Internal.event => Types.{{contract.name.capitalized}}.{{event.name}}.event)
    }
    {{/if}}
    {{#if ../../is_fuel_ecosystem}}
    @genType
    let mockData = (params) => {
      EventFunctions.makeEventMocker(
        ~params=params->(Utils.magic: Types.{{contract.name.capitalized}}.{{event.name}}.eventArgs => Internal.eventParams),
        ~mockEventData=None,
        ~register=(Types.{{contract.name.capitalized}}.{{event.name}}.register :> unit => Internal.eventConfig),
      )->(Utils.magic: Internal.event => Types.{{contract.name.capitalized}}.{{event.name}}.event)
    }
    {{/if}}
  }

  {{/each}}
}

{{/each}}

@genType
let createTestIndexer = TestIndexer.factory(
  ~registerAllHandlers=Generated.registerAllHandlers,
  ~makeGeneratedConfig=Generated.makeGeneratedConfig,
  ~makePgClient=Db.makeClient,
  ~makeStorage=(~sql, ~pgSchema, ~isHasuraEnabled) =>
    Generated.makeStorage(~sql, ~pgSchema, ~isHasuraEnabled),
  ~codegenPersistence=Generated.codegenPersistence,
  // Have it here, since the modules are not available from npm
  ~createGlobalStateAndRun=(~indexer, ~runningChains) => {
    Promise.makeAsync(async (resolve, _reject) => {
      let chainManager = await ChainManager.makeFromDbState(
        ~initialState=indexer.persistence->Persistence.getInitializedState,
        ~config=indexer.config,
        ~registrations=indexer.registrations,
        ~persistence=indexer.persistence,
      )
      let globalState = GlobalState.make(~indexer, ~chainManager, ~shouldUseTui=false) // FIXME: Should replace use TUI with keep alive on finish
      let gsManager = globalState->GlobalStateManager.make

      gsManager->GlobalStateManager.dispatchTask(NextQuery(CheckAllChains))

      while {
        let state = gsManager->GlobalStateManager.getState
        runningChains->Js.Array2.some(chain => {
          let chainFetcher = state.chainManager.chainFetchers->ChainMap.get(chain)
          chainFetcher.committedProgressBlockNumber <
          chainFetcher.fetchState.endBlock->Belt.Option.getUnsafe
        })
      } {
        await Utils.delay(1)
      }
      let state = gsManager->GlobalStateManager.getState
      // Finish it
      gsManager->GlobalStateManager.setState({
        ...gsManager->GlobalStateManager.getState,
        id: state.id + 1,
      })
      resolve()
    })
  },
)->(Utils.magic: (unit => TestIndexer.t) => unit => Types.testIndexer)
