@val external require: string => unit = "require"

let registerContractHandlers = (
  ~contractName,
  ~handlerPathRelativeToRoot,
  ~handlerPathRelativeToConfig,
) => {
  try {
    require("root/" ++ handlerPathRelativeToRoot)
  } catch {
  | exn =>
    let params = {
      "Contract Name": contractName,
      "Expected Handler Path": handlerPathRelativeToConfig,
      "Code": "EE500",
    }
    let logger = Logging.createChild(~params)

    let errHandler = exn->ErrorHandling.make(~msg="Failed to import handler file", ~logger)
    errHandler->ErrorHandling.log
    errHandler->ErrorHandling.raiseExn
  }
}

%%private(
  let makeGeneratedConfig = () => {
    let chains = [
      {{#each chain_configs as | chain_config |}}
      {
        let contracts = [
          {{#each chain_config.codegen_contracts as | contract |}}
          {
            Config.name: "{{contract.name.capitalized}}",
            abi: Types.{{contract.name.capitalized}}.abi,
            addresses: [
              {{#each contract.addresses as | address |}}
              {{#if ../../../is_evm_ecosystem}}
              "{{address}}"->Address.Evm.fromStringOrThrow
              {{else}}
              "{{address}}"->Address.unsafeFromString
              {{/if}},
              {{/each}}
            ],
            events: [
              {{#each contract.events as | event |}}
              module(Types.{{contract.name.capitalized}}.{{event.name}}),
              {{/each}}
            ],
          },
          {{/each}}
        ]
        let chain = ChainMap.Chain.makeUnsafe(~chainId={{chain_config.network_config.id}})
        {
          Config.confirmedBlockThreshold: {{chain_config.network_config.confirmed_block_threshold}},
          syncSource: 
            {{#if chain_config.network_config.rpc_config}}
            Rpc
            {{/if}}
            {{#if chain_config.network_config.hypersync_config}}
            HyperSync
            {{/if}}
            {{#if chain_config.network_config.hyperfuel_config}}
            HyperFuel
            {{/if}},
          startBlock: {{chain_config.network_config.start_block}},
          endBlock: {{#if chain_config.network_config.end_block}} Some({{chain_config.network_config.end_block}}) {{else}} None {{/if}},
          chain,
          contracts,
          chainWorker:
            {{#if chain_config.network_config.rpc_config }}
            {{#with chain_config.network_config.rpc_config as | rpc_config |}}
            module(RpcWorker.Make({
              let chain = chain
              let contracts = contracts
              let syncConfig = Config.getSyncConfig({
                initialBlockInterval: {{rpc_config.sync_config.initial_block_interval}},
                backoffMultiplicative: {{rpc_config.sync_config.backoff_multiplicative}},
                accelerationAdditive: {{rpc_config.sync_config.acceleration_additive}},
                intervalCeiling: {{rpc_config.sync_config.interval_ceiling}},
                backoffMillis: {{rpc_config.sync_config.backoff_millis}},
                queryTimeoutMillis: {{rpc_config.sync_config.query_timeout_millis}},
              })
              let provider = Ethers.JsonRpcProvider.make(
                ~rpcUrls={{vec_to_array rpc_config.urls}},
                ~chainId={{chain_config.network_config.id}},
                ~fallbackStallTimeout={{rpc_config.sync_config.fallback_stall_timeout}},
              )
              let eventRouter =
                contracts
                ->Belt.Array.flatMap(contract => contract.events)
                ->EventRouter.fromEvmEventModsOrThrow(~chain)
            }))
            {{/with}}
            {{/if}}
            {{#if chain_config.network_config.hypersync_config }}
            {{#with chain_config.network_config.hypersync_config as | hypersync_config |}}
            module(HyperSyncWorker.Make({
              let chain = chain
              let contracts = contracts
              let endpointUrl = "{{hypersync_config.endpoint_url}}"
              let allEventSignatures = [
                {{#each ../codegen_contracts as |contract|}}
                Types.{{contract.name.capitalized}}.eventSignatures,
                {{/each}}
              ]->Belt.Array.concatMany
              let eventRouter =
                contracts
                ->Belt.Array.flatMap(contract => contract.events)
                ->EventRouter.fromEvmEventModsOrThrow(~chain)
              /*
                Determines whether to use HypersyncClient Decoder or Viem for parsing events
                Default is hypersync client decoder, configurable in config with:
                ```yaml
                event_decoder: "viem" || "hypersync-client"
                ```
              */
              let shouldUseHypersyncClientDecoder = Env.Configurable.shouldUseHypersyncClientDecoder->Belt.Option.getWithDefault(
                {{hypersync_config.is_client_decoder}},
              )
            }))
            {{/with}}
            {{/if}}
            {{#if chain_config.network_config.hyperfuel_config }}
            {{#with chain_config.network_config.hyperfuel_config as | hyperfuel_config |}}
            module(HyperFuelWorker.Make({
              let chain = chain
              let endpointUrl = "{{hyperfuel_config.endpoint_url}}"
              let contracts: array<Internal.fuelContractConfig> = [
                {{#each chain_config.codegen_contracts as | contract |}}
                {
                  name: "{{contract.name.capitalized}}",
                  events: [
                    {{#each contract.events as | event |}}
                    Types.{{contract.name.capitalized}}.{{event.name}}.register(),
                    {{/each}}
                  ]
                },
                {{/each}}
              ]
            }))
            {{/with}}
            {{/if}}
        }
      },
      {{/each}}
    ]

    Config.make(
      ~shouldRollbackOnReorg={{should_rollback_on_reorg}},
      ~shouldSaveFullHistory={{should_save_full_history}},
      ~isUnorderedMultichainMode={{is_unordered_multichain_mode}},
      ~chains,
      ~enableRawEvents={{enable_raw_events}},
      ~entities=[
      {{#each entities as |entity|}}
        module(Entities.{{entity.name.capitalized}}),
      {{/each}}
      ],
    )
  }

  let config: ref<option<Config.t>> = ref(None)
)

let registerAllHandlers = () => {
{{#each codegen_contracts as |contract|}}
  registerContractHandlers(
    ~contractName="{{contract.name.capitalized}}",
    ~handlerPathRelativeToRoot="{{contract.handler.relative_to_project_root}}",
    ~handlerPathRelativeToConfig="{{contract.handler.relative_to_config}}",
  )
{{/each}}

  let generatedConfig = makeGeneratedConfig()
  config := Some(generatedConfig)
  generatedConfig
}

let getConfig = () => {
  switch config.contents {
  | Some(config) => config
  | None => registerAllHandlers()
  }
}
