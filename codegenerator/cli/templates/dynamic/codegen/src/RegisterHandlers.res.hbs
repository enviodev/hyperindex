@val external require: string => unit = "require"

let registerContractHandlers = (
  ~contractName,
  ~handlerPathRelativeToRoot,
  ~handlerPathRelativeToConfig,
) => {
  try {
    require("root/" ++ handlerPathRelativeToRoot)
  } catch {
  | exn =>
    let params = {
      "Contract Name": contractName,
      "Expected Handler Path": handlerPathRelativeToConfig,
      "Code": "EE500",
    }
    let logger = Logging.createChild(~params)

    let errHandler = exn->ErrorHandling.make(~msg="Failed to import handler file", ~logger)
    errHandler->ErrorHandling.log
    errHandler->ErrorHandling.raiseExn
  }
}

%%private(
  let makeGeneratedConfig = () => {
    let chains = [
      {{#each chain_configs as | chain_config |}}
      {
        let contracts = [
          {{#each chain_config.codegen_contracts as | contract |}}
          {
            Config.name: "{{contract.name.capitalized}}",
            abi: Types.{{contract.name.capitalized}}.abi,
            addresses: [
              {{#each contract.addresses as | address |}}
              {{#if ../../../is_evm_ecosystem}}
              "{{address}}"->Address.Evm.fromStringOrThrow
              {{else}}
              "{{address}}"->Address.unsafeFromString
              {{/if}},
              {{/each}}
            ],
            events: [
              {{#each contract.events as | event |}}
              (Types.{{contract.name.capitalized}}.{{event.name}}.register() :> Internal.eventConfig),
              {{/each}}
            ],
          },
          {{/each}}
        ]
        let chain = ChainMap.Chain.makeUnsafe(~chainId={{chain_config.network_config.id}})
        {
          Config.confirmedBlockThreshold: {{chain_config.network_config.confirmed_block_threshold}},
          startBlock: {{chain_config.network_config.start_block}},
          endBlock: {{#if chain_config.network_config.end_block}}Some({{chain_config.network_config.end_block}}){{else}}None{{/if}},
          chain,
          contracts,
          sources: {{chain_config.sources_code}}
        }
      },
      {{/each}}
    ]

    Config.make(
      ~shouldRollbackOnReorg={{should_rollback_on_reorg}},
      ~shouldSaveFullHistory={{should_save_full_history}},
      ~isUnorderedMultichainMode={{is_unordered_multichain_mode}},
      ~chains,
      ~enableRawEvents={{enable_raw_events}},
      {{#if chain_config.is_fuel}}
      ~ecosystem=Fuel,
      {{/if}}
    )
  }

  let config: ref<option<Config.t>> = ref(None)
)

let registerAllHandlers = () => {
{{#each codegen_contracts as |contract|}}
  registerContractHandlers(
    ~contractName="{{contract.name.capitalized}}",
    ~handlerPathRelativeToRoot="{{contract.handler.relative_to_project_root}}",
    ~handlerPathRelativeToConfig="{{contract.handler.relative_to_config}}",
  )
{{/each}}

  let generatedConfig = makeGeneratedConfig()
  config := Some(generatedConfig)
  generatedConfig
}

let getConfig = () => {
  switch config.contents {
  | Some(config) => config
  | None => registerAllHandlers()
  }
}
