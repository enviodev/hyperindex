open RescriptMocha

open Belt
open TestHelpers

{{#with imported_contracts.[0] as | contract |}}
    {{#with contract.imported_events.[0] as | event |}}
describe("{{contract.name.capitalized}} contract {{event.name.capitalized}} event tests", () => {
  // Create mock db
  let mockDb = MockDb.createMockDb()

  // Creating mock for {{contract.name.capitalized}} contract {{event.name.capitalized}} event
  let event = {{event.create_mock_code}};

  Async.it("{{contract.name.capitalized}}_{{event.name.capitalized}} is created correctly", async () => {
    // Processing the event
    let mockDbUpdated = await {{contract.name.capitalized}}.{{event.name.capitalized}}.processEvent({
      event,
      mockDb,
    })

    // Getting the actual entity from the mock database
    let actual{{contract.name.capitalized}}{{event.name.capitalized}} =
      mockDbUpdated.entities.{{contract.name.uncapitalized}}_{{event.name.capitalized}}.get(
        {{event.entity_id_from_event_code}},
      )->Option.getExn

    // Creating the expected entity
    let expected{{contract.name.capitalized}}{{event.name.capitalized}}: Types.{{contract.name.uncapitalized}}_{{event.name.capitalized}} = {
      id: {{event.entity_id_from_event_code}},
      {{#each event.params as |param|}}
      {{param.res_name}}: event.params.{{param.res_name}}{{#if param.is_eth_address}}->Address.toString{{/if}},
      {{/each}}
    }
    //Assert the expected {{contract.name.capitalized}} {{event.name.capitalized}} entity
    Assert.deepEqual(
      actual{{contract.name.capitalized}}{{event.name.capitalized}},
      expected{{contract.name.capitalized}}{{event.name.capitalized}},
      ~message="Actual {{contract.name.capitalized}}_{{event.name.capitalized}} should be the same as the expected {{contract.name.capitalized}}_{{event.name.capitalized}}",
    )
  })
})
    {{/with}}
{{/with}}
