{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Envio Config Schema",
  "description": "Schema for a YAML config for an envio indexer",
  "type": "object",
  "properties": {
    "description": {
      "description": "Description of the project",
      "type": [
        "string",
        "null"
      ]
    },
    "name": {
      "description": "Name of the project",
      "type": "string"
    },
    "ecosystem": {
      "description": "Ecosystem of the project.",
      "anyOf": [
        {
          "$ref": "#/$defs/EcosystemTag"
        },
        {
          "type": "null"
        }
      ]
    },
    "schema": {
      "description": "Custom path to config file",
      "type": [
        "string",
        "null"
      ]
    },
    "contracts": {
      "description": "Global contract definitions that must contain all definitions except addresses. You can share a single handler/abi/event definitions for contracts across multiple chains.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/$defs/GlobalContract_for_ContractConfig"
      }
    },
    "networks": {
      "description": "Configuration of the blockchain networks that the project is deployed on.",
      "type": "array",
      "items": {
        "$ref": "#/$defs/Network"
      }
    },
    "unordered_multichain_mode": {
      "description": "A flag to indicate if the indexer should use a single queue for all chains or a queue per chain (default: false)",
      "type": [
        "boolean",
        "null"
      ]
    },
    "event_decoder": {
      "description": "The event decoder to use for the indexer (default: hypersync-client)",
      "anyOf": [
        {
          "$ref": "#/$defs/EventDecoder"
        },
        {
          "type": "null"
        }
      ]
    },
    "rollback_on_reorg": {
      "description": "A flag to indicate if the indexer should rollback to the last known valid block on a reorg (default: true)",
      "type": [
        "boolean",
        "null"
      ]
    },
    "save_full_history": {
      "description": "A flag to indicate if the indexer should save the full history of events. This is useful for debugging but will increase the size of the database (default: false)",
      "type": [
        "boolean",
        "null"
      ]
    },
    "field_selection": {
      "description": "An object representing additional fields to add to the event passed to handlers.",
      "anyOf": [
        {
          "$ref": "#/$defs/FieldSelection"
        },
        {
          "type": "null"
        }
      ]
    },
    "raw_events": {
      "description": "If true, the indexer will store the raw event data in the database. This is useful for debugging, but will increase the size of the database and the amount of time it takes to process events (default: false)",
      "type": [
        "boolean",
        "null"
      ]
    }
  },
  "additionalProperties": false,
  "required": [
    "name",
    "networks"
  ],
  "$defs": {
    "EcosystemTag": {
      "type": "string",
      "enum": [
        "evm"
      ]
    },
    "GlobalContract_for_ContractConfig": {
      "type": "object",
      "properties": {
        "name": {
          "description": "A unique project-wide name for this contract (no spaces)",
          "type": "string"
        },
        "abi_file_path": {
          "description": "Relative path (from config) to a json abi. If this is used then each configured event should simply be referenced by its name",
          "type": [
            "string",
            "null"
          ]
        },
        "handler": {
          "description": "The relative path to a file where handlers are registered for the given contract",
          "type": "string"
        },
        "events": {
          "description": "A list of events that should be indexed on this contract",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EventConfig"
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "name",
        "handler",
        "events"
      ]
    },
    "EventConfig": {
      "type": "object",
      "properties": {
        "event": {
          "description": "The human readable signature of an event 'eg. Transfer(address indexed from, address indexed to, uint256 value)' OR a reference to the name of an event in a json ABI file defined in your contract config. A provided signature will take precedence over what is defined in the json ABI",
          "type": "string"
        },
        "name": {
          "description": "Name of the event in the HyperIndex generated code. When ommitted, the event field will be used. Should be unique per contract",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "event"
      ]
    },
    "Network": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Public chain/network id",
          "type": "integer",
          "format": "uint64",
          "minimum": 0
        },
        "rpc_config": {
          "description": "RPC Config that will be used to subscribe to blockchain data on this network (TIP: This is optional and in most cases does not need to be specified if the network is supported with HyperSync. We recommend using HyperSync instead of RPC for 100x speed-up)",
          "anyOf": [
            {
              "$ref": "#/$defs/RpcConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "hypersync_config": {
          "description": "Optional HyperSync Config for additional fine-tuning",
          "anyOf": [
            {
              "$ref": "#/$defs/HypersyncConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "confirmed_block_threshold": {
          "description": "The number of blocks from the head that the indexer should account for in case of reorgs.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "start_block": {
          "description": "The block at which the indexer should start ingesting data",
          "type": "integer",
          "format": "int32"
        },
        "end_block": {
          "description": "The block at which the indexer should terminate.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "contracts": {
          "description": "All the contracts that should be indexed on the given network",
          "type": "array",
          "items": {
            "$ref": "#/$defs/NetworkContract_for_ContractConfig"
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "id",
        "start_block",
        "contracts"
      ]
    },
    "RpcConfig": {
      "type": "object",
      "properties": {
        "url": {
          "description": "URL of the RPC endpoint. Can be a single URL or an array of URLs. If multiple URLs are provided, the first one will be used as the primary RPC endpoint and the rest will be used as fallbacks.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "initial_block_interval": {
          "description": "The starting interval in range of blocks per query",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0
        },
        "backoff_multiplicative": {
          "description": "After an RPC error, how much to scale back the number of blocks requested at once",
          "type": [
            "number",
            "null"
          ],
          "format": "double"
        },
        "acceleration_additive": {
          "description": "Without RPC errors or timeouts, how much to increase the number of blocks requested by for the next batch",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0
        },
        "interval_ceiling": {
          "description": "Do not further increase the block interval past this limit",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0
        },
        "backoff_millis": {
          "description": "After an error, how long to wait before retrying",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0
        },
        "fallback_stall_timeout": {
          "description": "If a fallback RPC is provided, the amount of time in ms to wait before kicking off the next provider",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0
        },
        "query_timeout_millis": {
          "description": "How long to wait before cancelling an RPC request",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "required": [
        "url"
      ]
    },
    "HypersyncConfig": {
      "type": "object",
      "properties": {
        "url": {
          "description": "URL of the HyperSync endpoint (default: The most performant HyperSync endpoint for the network)",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "required": [
        "url"
      ]
    },
    "NetworkContract_for_ContractConfig": {
      "type": "object",
      "properties": {
        "name": {
          "description": "A unique project-wide name for this contract if events and handler are defined OR a reference to the name of contract defined globally at the top level",
          "type": "string"
        },
        "address": {
          "description": "A single address or a list of addresses to be indexed. This can be left as null in the case where this contracts addresses will be registered dynamically.",
          "$ref": "#/$defs/Addresses"
        },
        "abi_file_path": {
          "description": "Relative path (from config) to a json abi. If this is used then each configured event should simply be referenced by its name",
          "type": [
            "string",
            "null"
          ]
        },
        "handler": {
          "description": "The relative path to a file where handlers are registered for the given contract",
          "type": "string"
        },
        "events": {
          "description": "A list of events that should be indexed on this contract",
          "type": "array",
          "items": {
            "$ref": "#/$defs/EventConfig"
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "name"
      ]
    },
    "Addresses": {
      "anyOf": [
        {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "integer",
              "format": "uint",
              "minimum": 0
            }
          ]
        },
        {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer",
                "format": "uint",
                "minimum": 0
              }
            ]
          }
        }
      ]
    },
    "EventDecoder": {
      "type": "string",
      "enum": [
        "viem",
        "hypersync-client"
      ]
    },
    "FieldSelection": {
      "type": "object",
      "properties": {
        "transaction_fields": {
          "description": "Fields of a transaction to add to the event passed to handlers",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/TransactionField"
          }
        },
        "block_fields": {
          "description": "Fields of a block to add to the event passed to handlers",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/$defs/BlockField"
          }
        }
      },
      "additionalProperties": false
    },
    "TransactionField": {
      "type": "string",
      "enum": [
        "transactionIndex",
        "hash",
        "from",
        "to",
        "gas",
        "gasPrice",
        "maxPriorityFeePerGas",
        "maxFeePerGas",
        "cumulativeGasUsed",
        "effectiveGasPrice",
        "gasUsed",
        "input",
        "nonce",
        "value",
        "v",
        "r",
        "s",
        "contractAddress",
        "logsBloom",
        "type",
        "root",
        "status",
        "yParity",
        "chainId",
        "maxFeePerBlobGas",
        "blobVersionedHashes",
        "kind",
        "l1Fee",
        "l1GasPrice",
        "l1GasUsed",
        "l1FeeScalar",
        "gasUsedForL1"
      ]
    },
    "BlockField": {
      "type": "string",
      "enum": [
        "parentHash",
        "nonce",
        "sha3Uncles",
        "logsBloom",
        "transactionsRoot",
        "stateRoot",
        "receiptsRoot",
        "miner",
        "difficulty",
        "totalDifficulty",
        "extraData",
        "size",
        "gasLimit",
        "gasUsed",
        "uncles",
        "baseFeePerGas",
        "blobGasUsed",
        "excessBlobGas",
        "parentBeaconBlockRoot",
        "withdrawalsRoot",
        "l1BlockNumber",
        "sendCount",
        "sendRoot",
        "mixHash"
      ]
    }
  }
}
