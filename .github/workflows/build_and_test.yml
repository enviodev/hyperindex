name: Build & Test Scenario

on:
  pull_request:
  push:
    branches:
      - main

defaults:
  run:
    working-directory: codegenerator

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:16
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: testing
          POSTGRES_DB: envio-dev
          POSTGRES_USER: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host port of 5433 which envio will use.
          - 5433:5432

    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            testChanges:
              - "codegenerator/**"
              - "scenarios/test_codegen/**"

      - name: Setup rust cache
        if: steps.changes.outputs.testChanges == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            # using both of these paths to hedge bets on which is correct.
            ./codegenerator/target
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-

      - name: Cache (hardhat) Solidity
        if: steps.changes.outputs.testChanges == 'true'
        id: cache-hardhat-solidity
        uses: actions/cache@v2
        with:
          path: ~/.cache/hardhat-nodejs
          key: ${{ runner.os }}-solidity-hardhat-${{ hashFiles('**/hardhat.config.*s') }}
          restore-keys: |
            ${{ runner.os }}-solidity-hardhat-${{ hashFiles('**/hardhat.config.*s') }}
            ${{ runner.os }}-solidity-hardhat-

      - uses: pnpm/action-setup@v3
        if: steps.changes.outputs.testChanges == 'true'
        with:
          version: 8.9

      - name: Get pnpm store directory (if this seems stable and static we can hard-code it again) # Source: https://github.com/pnpm/action-setup#use-cache-to-reduce-installation-time
        if: steps.changes.outputs.testChanges == 'true'
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        if: steps.changes.outputs.testChanges == 'true'
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          # updating the pnmp-lock.yaml in the test_codegen folder has strange side effects in this test, look to make this more robust
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }} 
            ${{ runner.os }}-pnpm-store-

      - name: Cargo Build
        if: steps.changes.outputs.testChanges == 'true'
        run: cargo build --verbose

      - name: Cargo Tests
        if: steps.changes.outputs.testChanges == 'true'
        run: cargo test --no-default-features --verbose

      - name: Setup Node.js
        if: steps.changes.outputs.testChanges == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 18.15.0

      - name: test_codegen build
        if: steps.changes.outputs.testChanges == 'true'
        working-directory: scenarios/test_codegen
        run: |
          pnpm codegen
          pnpm install
          pnpm hardhat compile --verbose
          pnpm res:build

      - name: test_codegen test TS types
        if: steps.changes.outputs.testChanges == 'true'
        working-directory: scenarios/test_codegen
        run: pnpm ts:test

      - name: test_codegen test
        if: steps.changes.outputs.testChanges == 'true'
        working-directory: scenarios/test_codegen
        run: |
          pnpm test

      - name: erc20_multichain_factory build
        if: steps.changes.outputs.testChanges == 'true'
        working-directory: scenarios/erc20_multichain_factory
        run: |
          pnpm codegen
          pnpm install
          pnpm build

      - name: erc20_multichain_factory test
        if: steps.changes.outputs.testChanges == 'true'
        working-directory: scenarios/erc20_multichain_factory
        run: |
          pnpm test

      - name: fuel_test build
        if: steps.changes.outputs.testChanges == 'true'
        working-directory: scenarios/fuel_test
        run: |
          pnpm codegen

      - name: fuel_test test
        if: steps.changes.outputs.testChanges == 'true'
        working-directory: scenarios/fuel_test
        run: |
          pnpm test
