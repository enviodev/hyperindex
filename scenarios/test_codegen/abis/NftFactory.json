{
  "address": "0xB1540299B9853c11cEA52939D0C3e06b29Ad99ec",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "SimpleNftCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        }
      ],
      "name": "createNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x97d0e64ffcd817930b5a3db87f2c270763d5c4a4b24e70da6849c29dd268d1ee",
  "receipt": {
    "to": null,
    "from": "0x958f5cCD25A85A7B3614c9B150D855343A99fB4d",
    "contractAddress": "0xB1540299B9853c11cEA52939D0C3e06b29Ad99ec",
    "transactionIndex": 0,
    "gasUsed": "2825977",
    "logsBloom": "0x
    "blockHash": "0x22f46827a74376066ae1323e794284818c9ae7857c3ad92dd8e2be2dace05e8c",
    "transactionHash": "0x97d0e64ffcd817930b5a3db87f2c270763d5c4a4b24e70da6849c29dd268d1ee",
    "logs": [],
    "blockNumber": 22009922,
    "cumulativeGasUsed": "2825977",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf545600cc7f64ad89f68da4537bebcf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"SimpleNftCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"createNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftFactory.sol\":\"NftFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/NftFactory.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"./SimpleNft.sol\\\";\\n\\ncontract NftFactory {\\n    event SimpleNftCreated(\\n        string name,\\n        string symbol,\\n        uint256 maxSupply,\\n        address contractAddress\\n    );\\n\\n    constructor() {}\\n\\n    function createNft(\\n        string memory name,\\n        string memory symbol,\\n        uint256 maxSupply\\n    ) external {\\n        SimpleNft simpleNft = new SimpleNft(name, symbol, maxSupply);\\n        emit SimpleNftCreated(name, symbol, maxSupply, address(simpleNft));\\n    }\\n}\\n\",\"keccak256\":\"0xbc7f33be2f3f39044e6dfea3026e30d67e84d1eec7304eb08802db822e96d54f\"},\"contracts/SimpleNft.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract SimpleNft is ERC721 {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _supply;\\n    uint256 public maxSupply;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 _maxSupply\\n    ) ERC721(name, symbol) {\\n        _supply.increment();\\n        maxSupply = _maxSupply;\\n    }\\n\\n    function mint(uint256 _quantity) public {\\n        require(\\n            (_quantity + _supply.current()) <= maxSupply,\\n            \\\"Max supply exceeded\\\"\\n        );\\n        _mintLoop(msg.sender, _quantity);\\n    }\\n\\n    function _mintLoop(address _to, uint256 _quantity) internal {\\n        for (uint256 i = 0; i < _quantity; ++i) {\\n            _safeMint(_to, _supply.current());\\n            _supply.increment();\\n        }\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _supply.current() - 1;\\n    }\\n}\\n\",\"keccak256\":\"0xd08e0bac1a3bf012c6fdafa72d8f64c2956012873ea2375fd98f9f8e85a6deee\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613271806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063587947bd1462000033575b600080fd5b6200005160048036038101906200004b919062000298565b62000053565b005b60008383836040516200006690620000d9565b6200007493929190620003cc565b604051809103906000f08015801562000091573d6000803e3d6000fd5b5090507f3d6c0a59537034543c2b659f2680883e62db3cbb1da1e1ceb4aa12ad4089984484848484604051620000cb94939291906200045c565b60405180910390a150505050565b612d8480620004b883390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001508262000105565b810181811067ffffffffffffffff8211171562000172576200017162000116565b5b80604052505050565b600062000187620000e7565b905062000195828262000145565b919050565b600067ffffffffffffffff821115620001b857620001b762000116565b5b620001c38262000105565b9050602081019050919050565b82818337600083830152505050565b6000620001f6620001f0846200019a565b6200017b565b90508281526020810184848401111562000215576200021462000100565b5b62000222848285620001d0565b509392505050565b600082601f830112620002425762000241620000fb565b5b813562000254848260208601620001df565b91505092915050565b6000819050919050565b62000272816200025d565b81146200027e57600080fd5b50565b600081359050620002928162000267565b92915050565b600080600060608486031215620002b457620002b3620000f1565b5b600084013567ffffffffffffffff811115620002d557620002d4620000f6565b5b620002e3868287016200022a565b935050602084013567ffffffffffffffff811115620003075762000306620000f6565b5b62000315868287016200022a565b9250506040620003288682870162000281565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156200036e57808201518184015260208101905062000351565b60008484015250505050565b6000620003878262000332565b6200039381856200033d565b9350620003a58185602086016200034e565b620003b08162000105565b840191505092915050565b620003c6816200025d565b82525050565b60006060820190508181036000830152620003e881866200037a565b90508181036020830152620003fe81856200037a565b90506200040f6040830184620003bb565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004448262000417565b9050919050565b620004568162000437565b82525050565b600060808201905081810360008301526200047881876200037a565b905081810360208301526200048e81866200037a565b90506200049f6040830185620003bb565b620004ae60608301846200044b565b9594505050505056fe60806040523480156200001157600080fd5b5060405162002d8438038062002d84833981810160405281019062000037919062000265565b828281600090816200004a919062000540565b5080600190816200005c919062000540565b5050506200007160066200008160201b60201c565b8060078190555050505062000627565b6001816000016000828254019250508190555050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200010082620000b5565b810181811067ffffffffffffffff82111715620001225762000121620000c6565b5b80604052505050565b60006200013762000097565b9050620001458282620000f5565b919050565b600067ffffffffffffffff821115620001685762000167620000c6565b5b6200017382620000b5565b9050602081019050919050565b60005b83811015620001a057808201518184015260208101905062000183565b60008484015250505050565b6000620001c3620001bd846200014a565b6200012b565b905082815260208101848484011115620001e257620001e1620000b0565b5b620001ef84828562000180565b509392505050565b600082601f8301126200020f576200020e620000ab565b5b815162000221848260208601620001ac565b91505092915050565b6000819050919050565b6200023f816200022a565b81146200024b57600080fd5b50565b6000815190506200025f8162000234565b92915050565b600080600060608486031215620002815762000280620000a1565b5b600084015167ffffffffffffffff811115620002a257620002a1620000a6565b5b620002b086828701620001f7565b935050602084015167ffffffffffffffff811115620002d457620002d3620000a6565b5b620002e286828701620001f7565b9250506040620002f5868287016200024e565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200035257607f821691505b6020821081036200036857620003676200030a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003d27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000393565b620003de868362000393565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004216200041b62000415846200022a565b620003f6565b6200022a565b9050919050565b6000819050919050565b6200043d8362000400565b620004556200044c8262000428565b848454620003a0565b825550505050565b600090565b6200046c6200045d565b6200047981848462000432565b505050565b5b81811015620004a1576200049560008262000462565b6001810190506200047f565b5050565b601f821115620004f057620004ba816200036e565b620004c58462000383565b81016020851015620004d5578190505b620004ed620004e48562000383565b8301826200047e565b50505b505050565b600082821c905092915050565b60006200051560001984600802620004f5565b1980831691505092915050565b600062000530838362000502565b9150826002028217905092915050565b6200054b82620002ff565b67ffffffffffffffff811115620005675762000566620000c6565b5b62000573825462000339565b62000580828285620004a5565b600060209050601f831160018114620005b85760008415620005a3578287015190505b620005af858262000522565b8655506200061f565b601f198416620005c8866200036e565b60005b82811015620005f257848901518255600182019150602085019450602081019050620005cb565b868310156200061257848901516200060e601f89168262000502565b8355505b6001600288020188555050505b505050505050565b61274d80620006376000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063b88d4fde11610066578063b88d4fde146102ab578063c87b56dd146102c7578063d5abeb01146102f7578063e985e9c51461031557610100565b806370a082311461022557806395d89b4114610255578063a0712d6814610273578063a22cb4651461028f57610100565b806318160ddd116100d357806318160ddd1461019f57806323b872dd146101bd57806342842e0e146101d95780636352211e146101f557610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a91906118fe565b610345565b60405161012c9190611946565b60405180910390f35b61013d610427565b60405161014a91906119f1565b60405180910390f35b61016d60048036038101906101689190611a49565b6104b9565b60405161017a9190611ab7565b60405180910390f35b61019d60048036038101906101989190611afe565b6104ff565b005b6101a7610616565b6040516101b49190611b4d565b60405180910390f35b6101d760048036038101906101d29190611b68565b610633565b005b6101f360048036038101906101ee9190611b68565b610693565b005b61020f600480360381019061020a9190611a49565b6106b3565b60405161021c9190611ab7565b60405180910390f35b61023f600480360381019061023a9190611bbb565b610739565b60405161024c9190611b4d565b60405180910390f35b61025d6107f0565b60405161026a91906119f1565b60405180910390f35b61028d60048036038101906102889190611a49565b610882565b005b6102a960048036038101906102a49190611c14565b6108e8565b005b6102c560048036038101906102c09190611d89565b6108fe565b005b6102e160048036038101906102dc9190611a49565b610960565b6040516102ee91906119f1565b60405180910390f35b6102ff6109c8565b60405161030c9190611b4d565b60405180910390f35b61032f600480360381019061032a9190611e0c565b6109ce565b60405161033c9190611946565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061041057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610420575061041f82610a62565b5b9050919050565b60606000805461043690611e7b565b80601f016020809104026020016040519081016040528092919081815260200182805461046290611e7b565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b5050505050905090565b60006104c482610acc565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061050a826106b3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190611f1e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610599610b17565b73ffffffffffffffffffffffffffffffffffffffff1614806105c857506105c7816105c2610b17565b6109ce565b5b610607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fe90611fb0565b60405180910390fd5b6106118383610b1f565b505050565b600060016106246006610bd8565b61062e9190611fff565b905090565b61064461063e610b17565b82610be6565b610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a906120a5565b60405180910390fd5b61068e838383610c7b565b505050565b6106ae838383604051806020016040528060008152506108fe565b505050565b6000806106bf83610f74565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072790612111565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a0906121a3565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546107ff90611e7b565b80601f016020809104026020016040519081016040528092919081815260200182805461082b90611e7b565b80156108785780601f1061084d57610100808354040283529160200191610878565b820191906000526020600020905b81548152906001019060200180831161085b57829003601f168201915b5050505050905090565b60075461088f6006610bd8565b8261089a91906121c3565b11156108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d290612243565b60405180910390fd5b6108e53382610fb1565b50565b6108fa6108f3610b17565b8383610fef565b5050565b61090f610909610b17565b83610be6565b61094e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610945906120a5565b60405180910390fd5b61095a8484848461115b565b50505050565b606061096b82610acc565b60006109756111b7565b9050600081511161099557604051806020016040528060008152506109c0565b8061099f846111ce565b6040516020016109b092919061229f565b6040516020818303038152906040525b915050919050565b60075481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610ad58161129c565b610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b90612111565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610b92836106b3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b600080610bf2836106b3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610c345750610c3381856109ce565b5b80610c7257508373ffffffffffffffffffffffffffffffffffffffff16610c5a846104b9565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610c9b826106b3565b73ffffffffffffffffffffffffffffffffffffffff1614610cf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce890612335565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d57906123c7565b60405180910390fd5b610d6d83838360016112dd565b8273ffffffffffffffffffffffffffffffffffffffff16610d8d826106b3565b73ffffffffffffffffffffffffffffffffffffffff1614610de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dda90612335565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610f6f83838360016112e3565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60005b81811015610fea57610fcf83610fca6006610bd8565b6112e9565b610fd96006611307565b80610fe3906123e7565b9050610fb4565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361105d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110549061247b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161114e9190611946565b60405180910390a3505050565b611166848484610c7b565b6111728484848461131d565b6111b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a89061250d565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600060016111dd846114a4565b01905060008167ffffffffffffffff8111156111fc576111fb611c5e565b5b6040519080825280601f01601f19166020018201604052801561122e5781602001600182028036833780820191505090505b509050600082602001820190505b600115611291578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816112855761128461252d565b5b0494506000850361123c575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166112be83610f74565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6113038282604051806020016040528060008152506115f7565b5050565b6001816000016000828254019250508190555050565b600061133e8473ffffffffffffffffffffffffffffffffffffffff16611652565b15611497578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611367610b17565b8786866040518563ffffffff1660e01b815260040161138994939291906125b1565b6020604051808303816000875af19250505080156113c557506040513d601f19601f820116820180604052508101906113c29190612612565b60015b611447573d80600081146113f5576040519150601f19603f3d011682016040523d82523d6000602084013e6113fa565b606091505b50600081510361143f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114369061250d565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061149c565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611502577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114f8576114f761252d565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061153f576d04ee2d6d415b85acef810000000083816115355761153461252d565b5b0492506020810190505b662386f26fc10000831061156e57662386f26fc1000083816115645761156361252d565b5b0492506010810190505b6305f5e1008310611597576305f5e100838161158d5761158c61252d565b5b0492506008810190505b61271083106115bc5761271083816115b2576115b161252d565b5b0492506004810190505b606483106115df57606483816115d5576115d461252d565b5b0492506002810190505b600a83106115ee576001810190505b80915050919050565b6116018383611675565b61160e600084848461131d565b61164d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116449061250d565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db9061268b565b60405180910390fd5b6116ed8161129c565b1561172d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611724906126f7565b60405180910390fd5b61173b6000838360016112dd565b6117448161129c565b15611784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177b906126f7565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461188e6000838360016112e3565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118db816118a6565b81146118e657600080fd5b50565b6000813590506118f8816118d2565b92915050565b6000602082840312156119145761191361189c565b5b6000611922848285016118e9565b91505092915050565b60008115159050919050565b6119408161192b565b82525050565b600060208201905061195b6000830184611937565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561199b578082015181840152602081019050611980565b60008484015250505050565b6000601f19601f8301169050919050565b60006119c382611961565b6119cd818561196c565b93506119dd81856020860161197d565b6119e6816119a7565b840191505092915050565b60006020820190508181036000830152611a0b81846119b8565b905092915050565b6000819050919050565b611a2681611a13565b8114611a3157600080fd5b50565b600081359050611a4381611a1d565b92915050565b600060208284031215611a5f57611a5e61189c565b5b6000611a6d84828501611a34565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611aa182611a76565b9050919050565b611ab181611a96565b82525050565b6000602082019050611acc6000830184611aa8565b92915050565b611adb81611a96565b8114611ae657600080fd5b50565b600081359050611af881611ad2565b92915050565b60008060408385031215611b1557611b1461189c565b5b6000611b2385828601611ae9565b9250506020611b3485828601611a34565b9150509250929050565b611b4781611a13565b82525050565b6000602082019050611b626000830184611b3e565b92915050565b600080600060608486031215611b8157611b8061189c565b5b6000611b8f86828701611ae9565b9350506020611ba086828701611ae9565b9250506040611bb186828701611a34565b9150509250925092565b600060208284031215611bd157611bd061189c565b5b6000611bdf84828501611ae9565b91505092915050565b611bf18161192b565b8114611bfc57600080fd5b50565b600081359050611c0e81611be8565b92915050565b60008060408385031215611c2b57611c2a61189c565b5b6000611c3985828601611ae9565b9250506020611c4a85828601611bff565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c96826119a7565b810181811067ffffffffffffffff82111715611cb557611cb4611c5e565b5b80604052505050565b6000611cc8611892565b9050611cd48282611c8d565b919050565b600067ffffffffffffffff821115611cf457611cf3611c5e565b5b611cfd826119a7565b9050602081019050919050565b82818337600083830152505050565b6000611d2c611d2784611cd9565b611cbe565b905082815260208101848484011115611d4857611d47611c59565b5b611d53848285611d0a565b509392505050565b600082601f830112611d7057611d6f611c54565b5b8135611d80848260208601611d19565b91505092915050565b60008060008060808587031215611da357611da261189c565b5b6000611db187828801611ae9565b9450506020611dc287828801611ae9565b9350506040611dd387828801611a34565b925050606085013567ffffffffffffffff811115611df457611df36118a1565b5b611e0087828801611d5b565b91505092959194509250565b60008060408385031215611e2357611e2261189c565b5b6000611e3185828601611ae9565b9250506020611e4285828601611ae9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e9357607f821691505b602082108103611ea657611ea5611e4c565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611f0860218361196c565b9150611f1382611eac565b604082019050919050565b60006020820190508181036000830152611f3781611efb565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611f9a603d8361196c565b9150611fa582611f3e565b604082019050919050565b60006020820190508181036000830152611fc981611f8d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061200a82611a13565b915061201583611a13565b925082820390508181111561202d5761202c611fd0565b5b92915050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b600061208f602d8361196c565b915061209a82612033565b604082019050919050565b600060208201905081810360008301526120be81612082565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006120fb60188361196c565b9150612106826120c5565b602082019050919050565b6000602082019050818103600083015261212a816120ee565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061218d60298361196c565b915061219882612131565b604082019050919050565b600060208201905081810360008301526121bc81612180565b9050919050565b60006121ce82611a13565b91506121d983611a13565b92508282019050808211156121f1576121f0611fd0565b5b92915050565b7f4d617820737570706c7920657863656564656400000000000000000000000000600082015250565b600061222d60138361196c565b9150612238826121f7565b602082019050919050565b6000602082019050818103600083015261225c81612220565b9050919050565b600081905092915050565b600061227982611961565b6122838185612263565b935061229381856020860161197d565b80840191505092915050565b60006122ab828561226e565b91506122b7828461226e565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061231f60258361196c565b915061232a826122c3565b604082019050919050565b6000602082019050818103600083015261234e81612312565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006123b160248361196c565b91506123bc82612355565b604082019050919050565b600060208201905081810360008301526123e0816123a4565b9050919050565b60006123f282611a13565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361242457612423611fd0565b5b600182019050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061246560198361196c565b91506124708261242f565b602082019050919050565b6000602082019050818103600083015261249481612458565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006124f760328361196c565b91506125028261249b565b604082019050919050565b60006020820190508181036000830152612526816124ea565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b60006125838261255c565b61258d8185612567565b935061259d81856020860161197d565b6125a6816119a7565b840191505092915050565b60006080820190506125c66000830187611aa8565b6125d36020830186611aa8565b6125e06040830185611b3e565b81810360608301526125f28184612578565b905095945050505050565b60008151905061260c816118d2565b92915050565b6000602082840312156126285761262761189c565b5b6000612636848285016125fd565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061267560208361196c565b91506126808261263f565b602082019050919050565b600060208201905081810360008301526126a481612668565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006126e1601c8361196c565b91506126ec826126ab565b602082019050919050565b60006020820190508181036000830152612710816126d4565b905091905056fea264697066735822122034372c12db5da63334e77deb97a705fd3aa3884d92318666bdd7aaf1acb5a4f964736f6c63430008130033a26469706673582212206a2c6ae6eb56d0e17f2ded99bc60ab8c3a31826fc2ac9b1a3e1046be118900d564736f6c63430008130033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063587947bd1462000033575b600080fd5b6200005160048036038101906200004b919062000298565b62000053565b005b60008383836040516200006690620000d9565b6200007493929190620003cc565b604051809103906000f08015801562000091573d6000803e3d6000fd5b5090507f3d6c0a59537034543c2b659f2680883e62db3cbb1da1e1ceb4aa12ad4089984484848484604051620000cb94939291906200045c565b60405180910390a150505050565b612d8480620004b883390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001508262000105565b810181811067ffffffffffffffff8211171562000172576200017162000116565b5b80604052505050565b600062000187620000e7565b905062000195828262000145565b919050565b600067ffffffffffffffff821115620001b857620001b762000116565b5b620001c38262000105565b9050602081019050919050565b82818337600083830152505050565b6000620001f6620001f0846200019a565b6200017b565b90508281526020810184848401111562000215576200021462000100565b5b62000222848285620001d0565b509392505050565b600082601f830112620002425762000241620000fb565b5b813562000254848260208601620001df565b91505092915050565b6000819050919050565b62000272816200025d565b81146200027e57600080fd5b50565b600081359050620002928162000267565b92915050565b600080600060608486031215620002b457620002b3620000f1565b5b600084013567ffffffffffffffff811115620002d557620002d4620000f6565b5b620002e3868287016200022a565b935050602084013567ffffffffffffffff811115620003075762000306620000f6565b5b62000315868287016200022a565b9250506040620003288682870162000281565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156200036e57808201518184015260208101905062000351565b60008484015250505050565b6000620003878262000332565b6200039381856200033d565b9350620003a58185602086016200034e565b620003b08162000105565b840191505092915050565b620003c6816200025d565b82525050565b60006060820190508181036000830152620003e881866200037a565b90508181036020830152620003fe81856200037a565b90506200040f6040830184620003bb565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004448262000417565b9050919050565b620004568162000437565b82525050565b600060808201905081810360008301526200047881876200037a565b905081810360208301526200048e81866200037a565b90506200049f6040830185620003bb565b620004ae60608301846200044b565b9594505050505056fe60806040523480156200001157600080fd5b5060405162002d8438038062002d84833981810160405281019062000037919062000265565b828281600090816200004a919062000540565b5080600190816200005c919062000540565b5050506200007160066200008160201b60201c565b8060078190555050505062000627565b6001816000016000828254019250508190555050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200010082620000b5565b810181811067ffffffffffffffff82111715620001225762000121620000c6565b5b80604052505050565b60006200013762000097565b9050620001458282620000f5565b919050565b600067ffffffffffffffff821115620001685762000167620000c6565b5b6200017382620000b5565b9050602081019050919050565b60005b83811015620001a057808201518184015260208101905062000183565b60008484015250505050565b6000620001c3620001bd846200014a565b6200012b565b905082815260208101848484011115620001e257620001e1620000b0565b5b620001ef84828562000180565b509392505050565b600082601f8301126200020f576200020e620000ab565b5b815162000221848260208601620001ac565b91505092915050565b6000819050919050565b6200023f816200022a565b81146200024b57600080fd5b50565b6000815190506200025f8162000234565b92915050565b600080600060608486031215620002815762000280620000a1565b5b600084015167ffffffffffffffff811115620002a257620002a1620000a6565b5b620002b086828701620001f7565b935050602084015167ffffffffffffffff811115620002d457620002d3620000a6565b5b620002e286828701620001f7565b9250506040620002f5868287016200024e565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200035257607f821691505b6020821081036200036857620003676200030a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003d27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000393565b620003de868362000393565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004216200041b62000415846200022a565b620003f6565b6200022a565b9050919050565b6000819050919050565b6200043d8362000400565b620004556200044c8262000428565b848454620003a0565b825550505050565b600090565b6200046c6200045d565b6200047981848462000432565b505050565b5b81811015620004a1576200049560008262000462565b6001810190506200047f565b5050565b601f821115620004f057620004ba816200036e565b620004c58462000383565b81016020851015620004d5578190505b620004ed620004e48562000383565b8301826200047e565b50505b505050565b600082821c905092915050565b60006200051560001984600802620004f5565b1980831691505092915050565b600062000530838362000502565b9150826002028217905092915050565b6200054b82620002ff565b67ffffffffffffffff811115620005675762000566620000c6565b5b62000573825462000339565b62000580828285620004a5565b600060209050601f831160018114620005b85760008415620005a3578287015190505b620005af858262000522565b8655506200061f565b601f198416620005c8866200036e565b60005b82811015620005f257848901518255600182019150602085019450602081019050620005cb565b868310156200061257848901516200060e601f89168262000502565b8355505b6001600288020188555050505b505050505050565b61274d80620006376000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063b88d4fde11610066578063b88d4fde146102ab578063c87b56dd146102c7578063d5abeb01146102f7578063e985e9c51461031557610100565b806370a082311461022557806395d89b4114610255578063a0712d6814610273578063a22cb4651461028f57610100565b806318160ddd116100d357806318160ddd1461019f57806323b872dd146101bd57806342842e0e146101d95780636352211e146101f557610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a91906118fe565b610345565b60405161012c9190611946565b60405180910390f35b61013d610427565b60405161014a91906119f1565b60405180910390f35b61016d60048036038101906101689190611a49565b6104b9565b60405161017a9190611ab7565b60405180910390f35b61019d60048036038101906101989190611afe565b6104ff565b005b6101a7610616565b6040516101b49190611b4d565b60405180910390f35b6101d760048036038101906101d29190611b68565b610633565b005b6101f360048036038101906101ee9190611b68565b610693565b005b61020f600480360381019061020a9190611a49565b6106b3565b60405161021c9190611ab7565b60405180910390f35b61023f600480360381019061023a9190611bbb565b610739565b60405161024c9190611b4d565b60405180910390f35b61025d6107f0565b60405161026a91906119f1565b60405180910390f35b61028d60048036038101906102889190611a49565b610882565b005b6102a960048036038101906102a49190611c14565b6108e8565b005b6102c560048036038101906102c09190611d89565b6108fe565b005b6102e160048036038101906102dc9190611a49565b610960565b6040516102ee91906119f1565b60405180910390f35b6102ff6109c8565b60405161030c9190611b4d565b60405180910390f35b61032f600480360381019061032a9190611e0c565b6109ce565b60405161033c9190611946565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061041057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610420575061041f82610a62565b5b9050919050565b60606000805461043690611e7b565b80601f016020809104026020016040519081016040528092919081815260200182805461046290611e7b565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b5050505050905090565b60006104c482610acc565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061050a826106b3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190611f1e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610599610b17565b73ffffffffffffffffffffffffffffffffffffffff1614806105c857506105c7816105c2610b17565b6109ce565b5b610607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fe90611fb0565b60405180910390fd5b6106118383610b1f565b505050565b600060016106246006610bd8565b61062e9190611fff565b905090565b61064461063e610b17565b82610be6565b610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a906120a5565b60405180910390fd5b61068e838383610c7b565b505050565b6106ae838383604051806020016040528060008152506108fe565b505050565b6000806106bf83610f74565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072790612111565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a0906121a3565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546107ff90611e7b565b80601f016020809104026020016040519081016040528092919081815260200182805461082b90611e7b565b80156108785780601f1061084d57610100808354040283529160200191610878565b820191906000526020600020905b81548152906001019060200180831161085b57829003601f168201915b5050505050905090565b60075461088f6006610bd8565b8261089a91906121c3565b11156108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d290612243565b60405180910390fd5b6108e53382610fb1565b50565b6108fa6108f3610b17565b8383610fef565b5050565b61090f610909610b17565b83610be6565b61094e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610945906120a5565b60405180910390fd5b61095a8484848461115b565b50505050565b606061096b82610acc565b60006109756111b7565b9050600081511161099557604051806020016040528060008152506109c0565b8061099f846111ce565b6040516020016109b092919061229f565b6040516020818303038152906040525b915050919050565b60075481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610ad58161129c565b610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b90612111565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610b92836106b3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b600080610bf2836106b3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610c345750610c3381856109ce565b5b80610c7257508373ffffffffffffffffffffffffffffffffffffffff16610c5a846104b9565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610c9b826106b3565b73ffffffffffffffffffffffffffffffffffffffff1614610cf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce890612335565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d57906123c7565b60405180910390fd5b610d6d83838360016112dd565b8273ffffffffffffffffffffffffffffffffffffffff16610d8d826106b3565b73ffffffffffffffffffffffffffffffffffffffff1614610de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dda90612335565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610f6f83838360016112e3565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60005b81811015610fea57610fcf83610fca6006610bd8565b6112e9565b610fd96006611307565b80610fe3906123e7565b9050610fb4565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361105d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110549061247b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161114e9190611946565b60405180910390a3505050565b611166848484610c7b565b6111728484848461131d565b6111b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a89061250d565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600060016111dd846114a4565b01905060008167ffffffffffffffff8111156111fc576111fb611c5e565b5b6040519080825280601f01601f19166020018201604052801561122e5781602001600182028036833780820191505090505b509050600082602001820190505b600115611291578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816112855761128461252d565b5b0494506000850361123c575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166112be83610f74565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6113038282604051806020016040528060008152506115f7565b5050565b6001816000016000828254019250508190555050565b600061133e8473ffffffffffffffffffffffffffffffffffffffff16611652565b15611497578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611367610b17565b8786866040518563ffffffff1660e01b815260040161138994939291906125b1565b6020604051808303816000875af19250505080156113c557506040513d601f19601f820116820180604052508101906113c29190612612565b60015b611447573d80600081146113f5576040519150601f19603f3d011682016040523d82523d6000602084013e6113fa565b606091505b50600081510361143f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114369061250d565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061149c565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611502577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114f8576114f761252d565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061153f576d04ee2d6d415b85acef810000000083816115355761153461252d565b5b0492506020810190505b662386f26fc10000831061156e57662386f26fc1000083816115645761156361252d565b5b0492506010810190505b6305f5e1008310611597576305f5e100838161158d5761158c61252d565b5b0492506008810190505b61271083106115bc5761271083816115b2576115b161252d565b5b0492506004810190505b606483106115df57606483816115d5576115d461252d565b5b0492506002810190505b600a83106115ee576001810190505b80915050919050565b6116018383611675565b61160e600084848461131d565b61164d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116449061250d565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db9061268b565b60405180910390fd5b6116ed8161129c565b1561172d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611724906126f7565b60405180910390fd5b61173b6000838360016112dd565b6117448161129c565b15611784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177b906126f7565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461188e6000838360016112e3565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118db816118a6565b81146118e657600080fd5b50565b6000813590506118f8816118d2565b92915050565b6000602082840312156119145761191361189c565b5b6000611922848285016118e9565b91505092915050565b60008115159050919050565b6119408161192b565b82525050565b600060208201905061195b6000830184611937565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561199b578082015181840152602081019050611980565b60008484015250505050565b6000601f19601f8301169050919050565b60006119c382611961565b6119cd818561196c565b93506119dd81856020860161197d565b6119e6816119a7565b840191505092915050565b60006020820190508181036000830152611a0b81846119b8565b905092915050565b6000819050919050565b611a2681611a13565b8114611a3157600080fd5b50565b600081359050611a4381611a1d565b92915050565b600060208284031215611a5f57611a5e61189c565b5b6000611a6d84828501611a34565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611aa182611a76565b9050919050565b611ab181611a96565b82525050565b6000602082019050611acc6000830184611aa8565b92915050565b611adb81611a96565b8114611ae657600080fd5b50565b600081359050611af881611ad2565b92915050565b60008060408385031215611b1557611b1461189c565b5b6000611b2385828601611ae9565b9250506020611b3485828601611a34565b9150509250929050565b611b4781611a13565b82525050565b6000602082019050611b626000830184611b3e565b92915050565b600080600060608486031215611b8157611b8061189c565b5b6000611b8f86828701611ae9565b9350506020611ba086828701611ae9565b9250506040611bb186828701611a34565b9150509250925092565b600060208284031215611bd157611bd061189c565b5b6000611bdf84828501611ae9565b91505092915050565b611bf18161192b565b8114611bfc57600080fd5b50565b600081359050611c0e81611be8565b92915050565b60008060408385031215611c2b57611c2a61189c565b5b6000611c3985828601611ae9565b9250506020611c4a85828601611bff565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c96826119a7565b810181811067ffffffffffffffff82111715611cb557611cb4611c5e565b5b80604052505050565b6000611cc8611892565b9050611cd48282611c8d565b919050565b600067ffffffffffffffff821115611cf457611cf3611c5e565b5b611cfd826119a7565b9050602081019050919050565b82818337600083830152505050565b6000611d2c611d2784611cd9565b611cbe565b905082815260208101848484011115611d4857611d47611c59565b5b611d53848285611d0a565b509392505050565b600082601f830112611d7057611d6f611c54565b5b8135611d80848260208601611d19565b91505092915050565b60008060008060808587031215611da357611da261189c565b5b6000611db187828801611ae9565b9450506020611dc287828801611ae9565b9350506040611dd387828801611a34565b925050606085013567ffffffffffffffff811115611df457611df36118a1565b5b611e0087828801611d5b565b91505092959194509250565b60008060408385031215611e2357611e2261189c565b5b6000611e3185828601611ae9565b9250506020611e4285828601611ae9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e9357607f821691505b602082108103611ea657611ea5611e4c565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611f0860218361196c565b9150611f1382611eac565b604082019050919050565b60006020820190508181036000830152611f3781611efb565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611f9a603d8361196c565b9150611fa582611f3e565b604082019050919050565b60006020820190508181036000830152611fc981611f8d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061200a82611a13565b915061201583611a13565b925082820390508181111561202d5761202c611fd0565b5b92915050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b600061208f602d8361196c565b915061209a82612033565b604082019050919050565b600060208201905081810360008301526120be81612082565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006120fb60188361196c565b9150612106826120c5565b602082019050919050565b6000602082019050818103600083015261212a816120ee565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061218d60298361196c565b915061219882612131565b604082019050919050565b600060208201905081810360008301526121bc81612180565b9050919050565b60006121ce82611a13565b91506121d983611a13565b92508282019050808211156121f1576121f0611fd0565b5b92915050565b7f4d617820737570706c7920657863656564656400000000000000000000000000600082015250565b600061222d60138361196c565b9150612238826121f7565b602082019050919050565b6000602082019050818103600083015261225c81612220565b9050919050565b600081905092915050565b600061227982611961565b6122838185612263565b935061229381856020860161197d565b80840191505092915050565b60006122ab828561226e565b91506122b7828461226e565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061231f60258361196c565b915061232a826122c3565b604082019050919050565b6000602082019050818103600083015261234e81612312565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006123b160248361196c565b91506123bc82612355565b604082019050919050565b600060208201905081810360008301526123e0816123a4565b9050919050565b60006123f282611a13565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361242457612423611fd0565b5b600182019050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061246560198361196c565b91506124708261242f565b602082019050919050565b6000602082019050818103600083015261249481612458565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006124f760328361196c565b91506125028261249b565b604082019050919050565b60006020820190508181036000830152612526816124ea565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b60006125838261255c565b61258d8185612567565b935061259d81856020860161197d565b6125a6816119a7565b840191505092915050565b60006080820190506125c66000830187611aa8565b6125d36020830186611aa8565b6125e06040830185611b3e565b81810360608301526125f28184612578565b905095945050505050565b60008151905061260c816118d2565b92915050565b6000602082840312156126285761262761189c565b5b6000612636848285016125fd565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061267560208361196c565b91506126808261263f565b602082019050919050565b600060208201905081810360008301526126a481612668565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006126e1601c8361196c565b91506126ec826126ab565b602082019050919050565b60006020820190508181036000830152612710816126d4565b905091905056fea264697066735822122034372c12db5da63334e77deb97a705fd3aa3884d92318666bdd7aaf1acb5a4f964736f6c63430008130033a26469706673582212206a2c6ae6eb56d0e17f2ded99bc60ab8c3a31826fc2ac9b1a3e1046be118900d564736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
